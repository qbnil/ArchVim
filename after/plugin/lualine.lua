local colors = {
    bg       = '#202328',
    fg       = '#bbc2cf',
    yellow   = '#ecbe7b',
    cyan     = '#008080',
    darkblue = '#081633',
    green    = '#98be65',
    orange   = '#ff8800',
    violet   = '#a9a1e1',
    magenta  = '#c678dd',
    blue     = '#51afef',
    red      = '#ec5f67',
}
--  require('lualine').setup {
    --  options = {
        --  icons_enabled = true,
        --  component_separators = { left = '', right = ''},
        --  section_separators = { left = '', right = ''},
        --  disabled_filetypes = {
            --  statusline = {},
            --  winbar = {},
        --  },
        --  always_divide_middle = true,
        --  globalstatus = false,
        --  refresh = {
            --  statusline = 1000,
            --  tabline = 1000,
            --  winbar = 1000,
        --  },
        --  ignore_focus = {
            --  "dapui_watches", "dapui_breakpoints",
            --  "dapui_scopes", "dapui_console",
            --  "dapui_stacks", "dap-repl"
        --  },
    --  },
-- copyright (c) 2020-2021 shadmansaleh
-- mit license, see license for more details.
-- -- Copyright (c) 2020-2021 shadmansaleh
-- MIT license, see LICENSE for more details.
-- Generated by lightline to lualine theme converter
-- https://gist.github.com/shadmansaleh/000871c9a608a012721c6acc6d7a19b9
-- stylua: ignore
-- Eviline config for lualine
-- Author: shadmansaleh
-- Credit: glepnir
--  local lualine = require('lualine')

--  -- Color table for highlights
--  -- stylua: ignore
--  local colors = {
    --  black     = '#000000',
    --  white     = '#eeeeee',
    --  red       = '#ffa0a0',
    --  green     = '#88cf88',
    --  blue      = '#92baff',
    --  magenta   = '#feacd0',
    --  cyan      = '#a0bfdf',
    --  gray      = '#101211',
    --  darkgray  = '#202020',
    --  lightgray = '#434343'
--  }
--  local conditions = {
  --  buffer_not_empty = function()
    --  return vim.fn.empty(vim.fn.expand('%:t')) ~= 1
  --  end,
  --  hide_in_width = function()
    --  return vim.fn.winwidth(0) > 80
  --  end,
  --  check_git_workspace = function()
    --  local filepath = vim.fn.expand('%:p:h')
    --  local gitdir = vim.fn.finddir('.git', filepath .. ';')
    --  return gitdir and #gitdir > 0 and #gitdir < #filepath
  --  end,
--  }

--  -- Config
--  local config = {
    --  options = {
        --  -- Disable sections and component separators
        --  component_separators = '',
        --  section_separators = '',
        --  theme = {
            --  normal = {
                --  a = { bg = colors.blue, fg = colors.lightgray, gui = 'bold' },
                --  b = { bg = colors.lightgray, fg = colors.blue },
                --  c = { bg = colors.gray, fg = colors.white },
            --  },
            --  insert = {
                --  a = { bg = colors.cyan, fg = colors.lightgray, gui = 'bold' },
                --  b = { bg = colors.lightgray, fg = colors.cyan },
                --  c = { bg = colors.gray, fg = colors.white },
            --  },
            --  visual = {
                --  a = { bg = colors.magenta, fg = colors.lightgray, gui = 'bold' },
                --  b = { bg = colors.lightgray, fg = colors.magenta },
                --  c = { bg = colors.gray, fg = colors.white },
            --  },
            --  replace = {
                --  a = { bg = colors.red, fg = colors.lightgray, gui = 'bold' },
                --  b = { bg = colors.lightgray, fg = colors.red },
                --  c = { bg = colors.gray, fg = colors.white },
            --  },
            --  command = {
                --  a = { bg = colors.green, fg = colors.lightgray, gui = 'bold' },
                --  b = { bg = colors.lightgray, fg = colors.green },
                --  c = { bg = colors.gray, fg = colors.white },
            --  },
            --  inactive = {
                --  a = { bg = colors.darkgray, fg = colors.lightgray, gui = 'bold' },
                --  b = { bg = colors.darkgray, fg = colors.lightgray },
                --  c = { bg = colors.darkgray, fg = colors.lightgray },
            --  },
            --  -- right section. Both are highlighted by c theme .  So we
            --  -- are just setting default looks o statusline
    --  },
  --  },
  --  sections = {
    --  -- these are to remove the defaults
    --  lualine_a = {},
    --  lualine_b = {},
    --  lualine_y = {},
    --  lualine_z = {},
    --  -- These will be filled later
    --  lualine_c = {},
    --  lualine_x = {
        --  },
  --  },
  --  inactive_sections = {
    --  -- these are to remove the defaults
    --  lualine_a = {},
    --  lualine_b = {},
    --  lualine_y = {},
    --  lualine_z = {},
    --  lualine_c = {},
    --  lualine_x = {},
  --  },
--  }

--  -- Inserts a component in lualine_c at left section
--  local function ins_left(component)
  --  table.insert(config.sections.lualine_c, component)
--  end

--  -- Inserts a component in lualine_x at right section
--  local function ins_right(component)
  --  table.insert(config.sections.lualine_x, component)
--  end

--  ins_left {
  --  function()
    --  return '▊'
  --  end,
  --  color = { fg = colors.blue }, -- Sets highlighting of component
  --  padding = { left = 0, right = 1 }, -- We don't need space before this
--  }

--  ins_left {
  --  -- mode component
  --  function()
    --  return ''
  --  end,
  --  color = function()
    --  -- auto change color according to neovims mode
    --  local mode_color = {
      --  n = colors.red,
      --  i = colors.green,
      --  v = colors.blue,
      --  ['␖'] = colors.blue,
      --  V = colors.blue,
      --  c = colors.magenta,
      --  no = colors.red,
      --  s = colors.orange,
      --  S = colors.orange,
      --  ['␓'] = colors.orange,
      --  ic = colors.yellow,
      --  R = colors.violet,
      --  Rv = colors.violet,
      --  cv = colors.red,
      --  ce = colors.red,
      --  r = colors.cyan,
      --  rm = colors.cyan,
      --  ['r?'] = colors.cyan,
      --  ['!'] = colors.red,
      --  t = colors.red,
    --  }
    --  return { fg = mode_color[vim.fn.mode()] }
  --  end,
  --  padding = { right = 1 },
--  }

--  ins_left {
  --  -- filesize component
  --  'filesize',
  --  cond = conditions.buffer_not_empty,
--  }

--  --  ins_left {
  --  --  'filename',
  --  --  cond = conditions.buffer_not_empty,
  --  --  color = { fg = colors.magenta, gui = 'bold' },
--  --  }

--  ins_left { 'location' }

--  ins_left { 'progress', color = { fg = colors.fg, gui = 'bold' } }

--  ins_left {
  --  'diagnostics',
  --  sources = { 'nvim_diagnostic' },
  --  symbols = { error = ' ', warn = ' ', info = ' ' },
  --  diagnostics_color = {
    --  color_error = { fg = colors.red },
    --  color_warn = { fg = colors.yellow },
    --  color_info = { fg = colors.cyan },
  --  },
--  }

--  -- Insert mid section. You can make any number of sections in neovim :)
--  -- for lualine it's any number greater then 2
--  ins_left {
  --  function()
    --  return '%='
  --  end,
--  }

--  ins_left {
  --  -- Lsp server name .
  --  function()
    --  local msg = 'No Active Lsp'
    --  local buf_ft = vim.api.nvim_buf_get_option(0, 'filetype')
    --  local clients = vim.lsp.get_active_clients()
    --  if next(clients) == nil then
      --  return msg
    --  end
    --  for _, client in ipairs(clients) do
      --  local filetypes = client.config.filetypes
      --  if filetypes and vim.fn.index(filetypes, buf_ft) ~= -1 then
        --  return client.name
      --  end
    --  end
    --  return msg
  --  end,
  --  icon = ' LSP:',
  --  color = { fg = '#ffffff', gui = 'bold' },
--  }

--  -- Add components to right sections
--  ins_right {
  --  'o:encoding', -- option component same as &encoding in viml
  --  fmt = string.upper, -- I'm not sure why it's upper case either ;)
  --  cond = conditions.hide_in_width,
  --  color = { fg = colors.green, gui = 'bold' },
--  }

--  ins_right {
  --  'fileformat',
  --  fmt = string.upper,
  --  icons_enabled = false, -- I think icons are cool but Eviline doesn't have them. sigh
  --  color = { fg = colors.green, gui = 'bold' },
--  }

--  ins_right {
  --  'branch',
  --  icon = '',
  --  color = { fg = colors.violet, gui = 'bold' },
--  }

--  ins_right {
  --  },
  --  cond = conditions.hide_in_width,
--  }

--  ins_right {
  --  function()
    --  return '▊'
  --  end,
  --  color = { fg = colors.blue },
  --  padding = { left = 1 },
--  }

--  -- Now don't forget to initialize lualine
--  lualine.setup(config)
local conditions = {
  buffer_not_empty = function()
    return vim.fn.empty(vim.fn.expand('%:t')) ~= 1
  end,
  hide_in_width = function()
    return vim.fn.winwidth(0) > 80
  end,
  check_git_workspace = function()
    local filepath = vim.fn.expand('%:p:h')
    local gitdir = vim.fn.finddir('.git', filepath .. ';')
    return gitdir and #gitdir > 0 and #gitdir < #filepath
  end,
}
local lualine = require 'lualine'

lualine.setup {
    options = {
        theme = 'ayu_dark'
    },
    sections = {
        lualine_a = {'mode'},
        lualine_b = {
            {'branch'},
            {
                'diff',
                colored = true,
                diff_color = {
                    added = { fg = colors.green },
                    modified = { fg = colors.orange },
                    removed = { fg = colors.red },
                },
                symbols = {added = ' ', modified = '󰝤 ', removed = ' '},
            },
            {'diagnostics'},
            --  {'filename',
            --  cond = conditions.buffer_not_empty,
            --  file_status = true,      -- displays file status (readonly status, modified status)
            --  newfile_status = false,  -- display new file status (new file means no write after created)
            --  path = 4,                -- 0: just the filename
            -- 1: relative path
            -- 2: absolute path
            -- 3: absolute path, with tilde as the home directory
            -- 4: filename and parent dir, with tilde as the home directory

            --  shorting_target = 40,    -- shortens path to leave 40 spaces in the window
            --  -- for other components. (terrible name, any suggestions?)
            --  symbols = {
            --  modified = '[+]',      -- text to show when the file is modified.
            --  readonly = '[-]',      -- text to show when the file is non-modifiable or readonly.
            --  unnamed = '[no name]', -- text to show for unnamed buffers.
            --  newfile = '[new]',     -- text to show for newly created file before first write
            --  },
            --  },
            {'fileformat'}
        },
        lualine_c = {''},
        lualine_x = {
            function()
                local ok, pomo = pcall(require, "pomo")
                if not ok then
                    return ""
                end
                local timer = pomo.get_first_to_finish() if timer == nil then
                    return ""
                end

                return "󰄉 " .. tostring(timer)
            end,
            "filetype",
        },
        lualine_y = {
            function()
                local msg = 'no active lsp'
                local buf_ft = vim.api.nvim_buf_get_option(0, 'filetype')
                local clients = vim.lsp.get_active_clients()
                if next(clients) == nil then
                    return msg
                end
                for _, client in ipairs(clients) do
                    local filetypes = client.config.filetypes
                    if filetypes and vim.fn.index(filetypes, buf_ft) ~= -1 then
                        return client.name
                    end
                end
                return msg
            end,
        },
        lualine_z = {
            "filesize",
            "progress",
            "location",
        },
    },
    inactive_sections = {
        lualine_a = {},
        lualine_b = {},
        lualine_c = {},
        lualine_x = {},
        lualine_y = {},
        lualine_z = {}
    },
    tabline = {},
    winbar = {},
    inactive_winbar = {},
    extensions = {}
}
--  'diff',
--  -- Is it me or the symbol for modified us really weird
--  symbols = { added = ' ', modified = '󰝤 ', removed = ' ' },
--  diff_color = {
--  added = { fg = colors.green },
--  modified = { fg = colors.orange },
--  removed = { fg = colors.red },

